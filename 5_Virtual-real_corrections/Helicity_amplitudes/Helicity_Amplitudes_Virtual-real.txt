VIRTUAL-REAL HELICITY AMPLITUDES

<!-- Helicities: quark - antiquark - gluon - lepton - antilepton -->

--------------------------------------------------------------------------------------


# 3-point amplitudes

MLRLLL_3 = (alpha_s / (2 * pi))^(3/2) * (vev/2 * C1) * gW^2 * mW * sqrt(2) * 1 / (s[1,2] - mW^2 + I * mW * Gamma_W) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (2 * b12 * Sq[1,2]^2 * Ang[1,5] * Ang[2,5] * ( Ang[1,3] * Sq[1,4] - Ang[2,3] * Sq[2,4] ) 
		+ b13 * s[1,5] * Sq[1,2] * Ang[2,5] * ( Ang[3,1] * Sq[1,4] * Sq[2,1] * Ang[1,5] - s[1,2] * Sq[2,4] * Ang[3,5] ) 
		+ b14 * s[1,5] * Sq[1,2] * Ang[2,5] * ( Ang[3,2] * Sq[2,4] * Sq[2,1] * Ang[1,5] - s[1,2] * Sq[2,4] * Ang[3,5] ) 
		+ b15 * s[1,5] * Sq[1,2] * Ang[2,5] * ( Ang[3,5] * Sq[5,4] * Sq[2,1] * Ang[1,5] - (s[5,3] + s[5,4]) * Sq[2,4] * Ang[3,5] ) 
		+ b16 * Sq[1,2] * Ang[2,5] * ( Ang[1,3] * Sq[1,4] * Ang[1,5] * Sq[2,1] + s[1,2] * Sq[2,4] * Ang[3,5] ) 
		+ b17 * Sq[1,2] * Ang[2,5] * ( Ang[2,3] * Sq[2,4] * Ang[1,5] * Sq[2,1] + s[1,2] * Sq[2,4] * Ang[3,5] ) 
		+ b18 * Sq[1,2] * Ang[2,5] * ( Ang[3,5] * Sq[4,5] * Ang[1,5] * Sq[2,1] + (s[5,3] + s[5,4]) * Sq[2,4] * Ang[3,5] ) 
		+ b19 * Sq[1,2] * Ang[3,5] * ( Ang[1,5] * Sq[1,4] + Ang[2,5] * Sq[2,4] ) 
		+ b20 * Sq[1,2]^2 * Sq[1,4] * Ang[2,3] * Ang[1,5]^2 
		+ b21 * Sq[1,2]^2 * Sq[2,4] * Ang[2,3] * Ang[2,5]^2 
		+ b22 * Sq[1,2]^2 * Sq[1,4] * Ang[2,3] * Ang[2,5]^2 
		+ b23 * Sq[1,2]^2 * Sq[2,4] * Ang[2,3] * Ang[2,5]^2)

MLRRLL_3 = - (alpha_s / (2 * pi))^(3/2) * (vev/2 * C1) * gW^2 * mW * sqrt(2) * 1 / (s[1,2] - mW^2 + I * mW * Gamma_W) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (8 * b8 * Sq[1,2] * Ang[1,3] * Sq[1,5] * Sq[4,5] 
		+ 8 * b9 * Sq[1,2] * Ang[2,3] * Sq[2,5] * Sq[4,5] 
		+ 2 * b10 * Sq[1,5] * Sq[2,5] * (s[1,2] * Ang[3,5] * Sq[4,5] - (s[5,3] + s[5,4]) * Ang[1,3] * Sq[1,4] ) 
		+ 2 * b11 * Sq[1,5] * Sq[2,5] * (s[1,2] * Ang[3,5] * Sq[4,5] - (s[5,3] + s[5,4]) * Ang[2,3] * Sq[2,4] ) 
		+ 2 * b12 * s[1,2] * Sq[1,5] * Sq[2,5] * ( Ang[2,3] * Sq[2,4] - Ang[1,3] * Sq[1,4] ) 
		+ ( s[1,5] * b13 + b16 ) * Sq[2,1] * Sq[2,5] * ( Ang[3,1] * Sq[1,4] * Ang[1,2] * Sq[1,5] + s[1,2] * Ang[2,3] * Sq[4,5] ) 
		+ ( s[1,5] * b14 + b17 ) * Sq[2,1] * Sq[2,5] * Ang[2,3] * ( Ang[2,1] * Sq[2,4] * Sq[1,5] + s[1,2] * Sq[4,5] ) 
		+ ( s[1,5] * b15 + b18 ) * Sq[2,1] * Sq[2,5] * Sq[4,5] * ( Ang[2,1] * Sq[1,5] * Ang[3,5] + (s[5,3] + s[5,4]) * Ang[2,3] ) 
		+ b19 * Sq[2,1] * Ang[3,5] * ( Sq[1,5] * Sq[1,4] + Sq[2,5] * Sq[2,4] ) 
		+ ( s[1,5] * b20 + s[2,5] * b22 ) * Sq[1,2]^2 * Sq[1,4] * Ang[2,3] 
		+ ( s[2,5] * b21 + s[1,5] * b23 ) * Sq[1,2]^2 * Sq[2,4] * Ang[2,3])

MRLLLL_3 = (alpha_s / (2 * pi))^(3/2) * (vev/2 * C2) * gW^2 * mW * sqrt(2) * 1 / (s[1,2] - mW^2 + I * mW * Gamma_W) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (4 * ( b8 + b9 ) * Ang[1,5] * Ang[2,5] * ( Ang[2,3] * Sq[2,4] + Ang[1,3] * Sq[1,4] ) 
		+ 2 *b10 * Ang[1,5] * Ang[2,5] * ( (s[5,3] + s[5,4]) * Ang[3,1] * Sq[1,4] * s[1,2] * Ang[3,5] * Sq[5,4] ) 
		+ 2 *b11 * Ang[1,5] * Ang[2,5] * ( (s[5,3] + s[5,4]) * Ang[3,2] * Sq[2,4] * s[1,2] * Ang[3,5] * Sq[5,4] ) 
		+ 2 *b12 * s[1,2] * Ang[1,5] * Ang[2,5] * ( Ang[2,3] * Sq[2,4] - Ang[1,3] * Sq[1,4] ) 
		+ b13 * s[1,5] * Ang[1,2] * Ang[2,5] * ( Ang[3,1] * Sq[1,4] * Sq[2,1] * Ang[1,5] - s[1,2] * Sq[2,4] * Ang[3,5] ) 
		+ b14 * s[1,5] * Ang[1,2] * Ang[2,5] * ( Ang[3,2] * Sq[2,4] * Sq[2,1] * Ang[1,5] - s[1,2] * Sq[2,4] * Ang[3,5] ) 
		+ b15 * s[1,5] * Ang[1,2] * Ang[2,5] * ( Ang[3,5] * Sq[5,4] * Sq[2,1] * Ang[1,5] - (s[5,3] + s[5,4]) * Sq[2,4] * Ang[3,5] ) 
		+ b16 * Ang[1,2] * Ang[2,5] * ( Ang[1,3] * Sq[1,4] * Ang[1,5] * Sq[2,1] + s[1,2] * Sq[2,4] * Ang[3,5] ) 
		+ b17 * Ang[1,2] * Ang[2,5] * ( Ang[2,3] * Sq[2,4] * Ang[1,5] * Sq[2,1] + s[1,2] * Sq[2,4] * Ang[3,5] ) 
		+ b18 * Ang[1,2] * Ang[2,5] * ( Ang[3,5] * Sq[4,5] * Ang[1,5] * Sq[2,1] + (s[5,3] + s[5,4]) * Sq[2,4] * Ang[3,5] ) 
		+ b19 * Ang[1,2] * Ang[3,5] * ( Ang[1,5] * Sq[1,4] + Ang[2,5] * Sq[2,4] ) 
		+ b20 * s[1,2] * Sq[1,4] * Ang[3,2] * Ang[1,5]^2 
		+ b21 * s[1,2] * Sq[2,4] * Ang[3,2] * Ang[2,5]^2 
		+ b22 * s[1,2] * Sq[1,4] * Ang[3,2] * Ang[2,5]^2 
		+ b23 * s[1,2] * Sq[2,4] * Ang[3,2] * Ang[1,5]^2 )

MRLRLL_3 = - (alpha_s / (2 * pi))^(3/2) * (vev/2 * C2) * gW^2 * mW * sqrt(2) * 1 / (s[1,2] - mW^2 + I * mW * Gamma_W) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (2 * b12 * Ang[1,2]^2 * Sq[1,5] * Sq[2,5] * ( Ang[1,3] * Sq[1,4] - Ang[2,3] * Sq[2,4] ) 
		+ ( s[1,5] * b13 + b16 ) * Ang[1,2] * Sq[2,5] * ( Ang[3,1] * Sq[1,4] * Ang[1,2] * Sq[1,5] + s[1,2] * Ang[2,3] * Sq[4,5] ) 
		+ ( s[1,5] * b14 + b17 ) * Ang[1,2] * Sq[2,5] * Ang[2,3] * ( Ang[2,1] * Sq[2,4] * Sq[1,5] + s[1,2] * Sq[4,5] ) 
		+ ( s[1,5] * b15 + b18 ) * Ang[1,2] * Sq[2,5] * Sq[4,5] * ( Ang[2,1] * Sq[1,5] * Ang[3,5] + (s[5,3] * s[5,4]) * Ang[2,3] ) 
		+ b19 * Ang[1,2] * Ang[3,5] * ( Sq[1,5] * Sq[1,4] + Sq[2,5] * Sq[2,4] ) 
		+ ( s[1,5] * b20 + s[2,5] * b22 ) * s[1,2] * Sq[1,4] * Ang[2,3] 
		+ ( s[2,5] * b21 + s[1,5] * b23 ) * s[1,2] * Sq[2,4] * Ang[2,3] )

MLLLLL_3 = (alpha_s / (2 * pi))^(3/2) * (S3 + vev/2 * C3) * gW^2 * mW * sqrt(2) * 1 / (s[1,2] - mW^2 + I * mW * Gamma_W) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (( s[1,2] * b1 + s[1,2] * b2 + (s[1,2] + s[1,5] + s[2,5]) * b3 + 2 * s[2,5] * b7 ) * Ang[5,2] * Ang[5,3] * Sq[4,1] 
		+ b4 * Ang[3,1] * Sq[1,4] * Ang[2,5]^2 * Sq[1,2] 
		+ b5 * Ang[3,2] * Sq[2,4] * Ang[2,5]^2 * Sq[1,2] 
		+ b6 * Ang[3,5] * Sq[5,4] * Ang[2,5]^2 * Sq[1,2] 
		+ 2 * b7 * Ang[2,5] * Ang[1,5] * Sq[2,1] * Ang[2,3] * Sq[4,1] )

MLLRLL_3 = (alpha_s / (2 * pi))^(3/2) * (S3 + vev/2 * C3) * gW^2 * mW * sqrt(2) * 1 / (s[1,2] - mW^2 + I * mW * Gamma_W) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (b1 * Ang[3,1] * Sq[1,4] * Sq[1,5]^2 * Ang[1,2] 
		+ b2 * Ang[3,2] * Sq[2,4] * Sq[1,5]^2 * Ang[1,2] 
		+ b3 * Ang[3,5] * Sq[5,4] * Sq[1,5]^2 * Ang[1,2] 
		+ 2 * b7 * Sq[1,5] * Sq[2,5] * Ang[1,2] * Ang[2,3] * Sq[4,1] 
		+ ( s[1,2] * b4 + s[1,2] * b5 + (s[1,2] + s[1,5] + s[2,5]) * b6 - 2 * s[1,5] * b7 ) * Sq[1,5] * Ang[2,3] * Sq[4,5] )

MRRLLL_3 = (alpha_s / (2 * pi))^(3/2) * (vev/2 * C4) * gW^2 * mW * sqrt(2) * 1 / (s[1,2] - mW^2 + I * mW * Gamma_W) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (b1 * Ang[3,1] * Sq[1,4] * Ang[1,5]^2 * Sq[2,1] 
		+ b2 * Ang[3,2] * Sq[2,4] * Ang[1,5]^2 * Sq[2,1] 
		+ b3 * Ang[3,5] * Sq[5,4] * Ang[1,5]^2 * Sq[2,1] 
		+ 2 * b7 * Ang[1,5] * Ang[2,5] * Sq[2,1] * Sq[2,4] * Ang[3,1] 
		+ ( s[1,2] * b4 + s[1,2] * b5 + (s[1,2] + s[1,5] + s[2,5]) * b6 - 2 * s[1,5] * b7 ) * Ang[5,1] * Sq[2,4] * Ang[3,5] )

MRRRLL_3 = (alpha_s / (2 * pi))^(3/2) * (vev/2 * C4) * gW^2 * mW * sqrt(2) * 1 / (s[1,2] - mW^2 + I * mW * Gamma_W) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (( s[1,2] * b1 + s[1,2] * b2 + (s[1,2] + s[1,5] + s[2,5]) * b3 + 2 * s[2,5] * b7 ) * Sq[2,5] * Sq[5,4] * Ang[3,1] 
		+ b4 * Ang[3,1] * Sq[1,4] * Sq[2,5]^2 * Ang[2,1] 
		+ b5 * Ang[3,2] * Sq[2,4] * Sq[2,5]^2 * Ang[2,1] 
		+ b6 * Ang[3,5] * Sq[5,4] * Sq[2,5]^2 * Ang[2,1] 
		+ 2 * b7 * Sq[1,5] * Sq[2,5] * Ang[2,1] * Sq[2,4] * Ang[3,1] )

    

# 4-point amplitudes

MLRLLL_4 = (alpha_s / (2 * pi))^(3/2) * C1 * gW * sqrt(2) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (4 * form_factor.a['a12 * Sq[1,2] * Sq[1,4] * Sq[2,4] * Ang[3,4] * Ang[1,5] * Ang[2,5] 
		+ ( s[1,5] * form_factor.a['a13 - form_factor.a['a16 ) * Sq[1,2] * Ang[2,5] * (Sq[1,2] * Ang[1,3] * Sq[3,4] * Ang[3,5] + Sq[1,4] * Sq[2,4] * Ang[5,1] * Ang[3,4])
		+ ( s[1,5] * form_factor.a['a14 - form_factor.a['a17 ) * Sq[2,1] * Sq[2,4]^2 * Ang[2,5]^2 * Ang[3,4] 
		+ ( s[1,5] * form_factor.a['a15 - form_factor.a['a18 ) * s[2,5] * Sq[2,1] * Ang[3,5]^2 * Sq[3,4] 
		+ form_factor.a['a19 * Sq[1,2] * Ang[3,5]^2 * Sq[3,4] 
		+ form_factor.a['a20 * Sq[1,2] * Sq[1,4]^2 * Ang[1,5]^2 * Ang[3,4] 
		+ form_factor.a['a21 * Sq[2,1] * Ang[1,5] * ( Sq[1,2] * Ang[3,2] * Ang[3,5] * Sq[3,4] + Sq[1,4] * Sq[2,4] * Ang[3,4] * Ang[2,5] ) 
		+ form_factor.a['a22 * Sq[2,1] * Sq[1,4] * Sq[2,4] * Ang[1,5] * Ang[2,5] * Ang[3,4] 
		+ form_factor.a['a23 * Sq[1,2] * Sq[2,4]^2 * Ang[2,5] * Ang[3,4])

MLRRLL_4 = (alpha_s / (2 * pi))^(3/2) * C1 * gW * sqrt(2) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (8 * form_factor.a['a8 * Sq[2,3] * Sq[3,4] * Ang[3,5] * Sq[5,1] 
		+ 4 * form_factor.a['a9 * Sq[3,1] * Sq[2,5] * Sq[3,4] * Ang[3,5] 
		+ 2 * form_factor.a['a10 * Sq[1,5] * Sq[2,5] * ( (s[5,3] + s[5,4]) * Ang[1,3] * Sq[1,4] - (s[1,3] + s[1,4]) * Ang[3,5] * Sq[4,5] ) 
		+ 2 * form_factor.a['a11 * Sq[1,5] * Sq[2,5] * ( (s[5,3] + s[5,4]) * Ang[2,3] * Sq[2,4] - (s[2,3] + s[2,4]) * Ang[3,5] * Sq[4,5] ) 
		+ 2 * form_factor.a['a12 * Sq[1,2] * Sq[1,3] * Sq[2,3] * Sq[4,3] * Ang[1,5] * Ang[2,5] 
		+ form_factor.a['a13 * Ang[1,5]^2 * Ang[2,5] * Sq[1,2] * (Sq[1,3] * Sq[2,3] * Sq[1,5] * Sq[3,4] + Sq[1,4] * Sq[4,5] * Ang[3,4] * Sq[1,2] ) 
		+ form_factor.a['a14 * s[2,5] * Sq[1,2] * Sq[2,3]^2 * Sq[3,4] * Ang[1,5]^2 
		+ form_factor.a['a15 * Sq[1,2] * Ang[1,5]^2 * Ang[2,5]^2 * Sq[3,4] * Sq[4,5]^2 
		+ form_factor.a['a16 * Sq[1,4] * Sq[2,3] * Sq[1,5] * Sq[2,5] * ( Ang[3,1] * Sq[2,3] + Ang[1,4] * Sq[2,4] ) 
		+ form_factor.a['a17 * Sq[2,4] * Sq[2,3] * Sq[1,5] * Sq[2,5] * ( Ang[3,2] * Sq[2,3] + Ang[2,4] * Sq[2,4] ) 
		+ form_factor.a['a18 * Sq[5,4] * Sq[2,3] * Sq[1,5] * Sq[2,5] * ( Ang[3,5] * Sq[2,3] + Ang[5,4] * Sq[2,4] ) 
		+ form_factor.a['a19 * Sq[2,1] * Sq[3,4] * Ang[3,5]^2 
		+ form_factor.a['a20 * Sq[2,1] * Sq[1,4]^2 * Ang[1,5]^2 * Ang[3,4] 
		+ form_factor.a['a21 * Sq[2,1] * Ang[1,5] * ( Sq[1,2] * Ang[3,2] * Ang[3,5] * Sq[3,4] + Sq[1,4] * Sq[2,4] * Ang[3,4] * Ang[2,5] ) 
		+ form_factor.a['a22 * Sq[2,1] * Sq[1,4] * Sq[2,4] * Ang[1,5] * Ang[2,5] * Ang[3,4] 
		+ form_factor.a['a23 * Sq[2,1] * Sq[2,4]^2 * Ang[2,5] * Ang[3,4])

MRLLLL_4 = (alpha_s / (2 * pi))^(3/2) * C2 * gW * sqrt(2) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (8 * form_factor.a['a8 * Ang[2,3] * Sq[3,4] * Ang[3,5] * Ang[1,5] 
		+ 4 * form_factor.a['a9 * Ang[1,3] * Ang[2,5] * Sq[3,4] * Ang[3,5] 
		+ 2 * form_factor.a['a10 * Ang[1,5] * Ang[2,5] * ( (s[1,3] + s[1,4]) * Ang[3,5] * Sq[4,5] * - (s[5,3] + s[5,4]) * Ang[1,3] * Sq[1,4] ) 
		+ 2 * form_factor.a['a11 * Ang[1,5] * Ang[2,5] * ( (s[2,3] + s[2,4]) * Ang[3,5] * Sq[4,5] - (s[5,3] + s[5,4]) * Ang[2,3] * Sq[2,4] ) 
		+ 2 * form_factor.a['a12 * Sq[1,2] * Ang[1,3] * Ang[2,3] * Sq[4,3] * Ang[1,5] * Ang[2,5] 
		+ form_factor.a['a13 * Ang[1,5]^2 * Ang[2,5] * Sq[1,2] * (Ang[3,1] * Ang[2,3] * Sq[1,5] * Sq[3,4] + Sq[1,4] * Sq[4,5] * Ang[4,3] * Ang[1,2] ) 
		+ form_factor.a['a14 * s[2,5] * Sq[1,2] * Ang[2,3]^2 * Sq[3,4] * Ang[1,5]^2 
		+ form_factor.a['a15 * Sq[1,2] * Ang[1,5]^2 * Ang[2,5]^2 * Ang[4,3] * Sq[4,5]^2 
		+ form_factor.a['a16 * Sq[1,4] * Ang[2,3] * Ang[5,1] * Ang[2,5] * ( Ang[3,1] * Sq[2,3] + Ang[1,4] * Sq[2,4] ) 
		+ form_factor.a['a17 * Sq[2,4] * Ang[2,3] * Ang[5,1] * Ang[2,5] * ( Ang[3,2] * Sq[2,3] + Ang[2,4] * Sq[2,4] ) 
		+ form_factor.a['a18 * Sq[5,4] * Ang[2,3] * Ang[5,1] * Ang[2,5] * ( Ang[3,5] * Sq[2,3] + Ang[5,4] * Sq[2,4] ) 
		+ form_factor.a['a19 * Ang[1,2] * Sq[3,4] * Ang[3,5]^2 
		+ form_factor.a['a20 * Ang[1,2] * Sq[1,4]^2 * Ang[1,5]^2 * Ang[3,4] 
		+ form_factor.a['a21 * Ang[1,2] * Ang[1,5] * ( Sq[1,2] * Ang[3,2] * Ang[3,5] * Sq[3,4] + Sq[1,4] * Sq[2,4] * Ang[3,4] * Ang[2,5] ) 
		+ form_factor.a['a22 * Ang[1,2] * Sq[1,4] * Sq[2,4] * Ang[1,5] * Ang[2,5] * Ang[3,4] 
		+ form_factor.a['a23 * Ang[1,2] * Sq[2,4]^2 * Ang[2,5] * Ang[3,4])

MRLRLL_4 = (alpha_s / (2 * pi))^(3/2) * C2 * gW * sqrt(2) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (4 * form_factor.a['a12 * Ang[2,1] * Sq[1,4] * Sq[2,4] * Ang[3,4] * Ang[1,5] * Ang[2,5] 
		+ ( s[1,5] * form_factor.a['a13 - form_factor.a['a16 ) * Ang[2,1] * Ang[2,5] * (Ang[2,1] * Ang[1,3] * Sq[3,4] * Ang[3,5] + Sq[1,4] * Sq[2,4] * Ang[5,1] * Sq[3,4]) 
		+ ( s[1,5] * form_factor.a['a14 - form_factor.a['a17 ) * Ang[1,2] * Sq[2,4]^2 * Ang[2,5]^2 * Ang[3,4] 
		+ ( s[1,5] * form_factor.a['a15 - form_factor.a['a18 ) * s[2,5] * Ang[1,2] * Ang[3,5]^2 * Sq[3,4] 
		+ form_factor.a['a19 * Ang[2,1] * Ang[3,5]^2 * Sq[3,4] 
		+ form_factor.a['a20 * Ang[2,1] * Sq[1,4]^2 * Ang[1,5]^2 * Ang[3,4] 
		+ form_factor.a['a21 * Ang[1,2] * Ang[1,5] * ( Sq[1,2] * Ang[3,2] * Ang[3,5] * Sq[3,4] + Sq[1,4] * Sq[2,4] * Ang[3,4] * Ang[2,5] ) 
		+ form_factor.a['a22 * Ang[1,2] * Sq[1,4] * Sq[2,4] * Ang[1,5] * Ang[2,5] * Ang[3,4] 
		+ form_factor.a['a23 * Ang[2,1] * Ang[2,4]^2 * Ang[2,5] * Ang[3,4])

MLLLLL_4 = (alpha_s / (2 * pi))^(3/2) * C3 * gW * sqrt(2) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (( s[1,2] * form_factor.a['a1 + s[1,2] * form_factor.a['a2 + (s[1,2] + s[1,5] + s[2,5]) * form_factor.a['a3 + 2 * s[2,5] * form_factor.a['a7 ) * Ang[5,2] * Ang[5,3] * Sq[4,1] 
		+ form_factor.a['a4 * Ang[3,1] * Sq[1,4] * Ang[2,5]^2 * Sq[1,2] 
		+ form_factor.a['a5 * Ang[3,2] * Sq[2,4] * Ang[2,5]^2 * Sq[1,2] 
		+ form_factor.a['a6 * Ang[3,5] * Sq[5,4] * Ang[2,5]^2 * Sq[1,2] 
		+ 2 * form_factor.a['a7 * Ang[2,5] * Ang[1,5] * Sq[2,1] * Ang[2,3] * Sq[4,1])

MLLRLL_4 = (alpha_s / (2 * pi))^(3/2) * C3 * gW * sqrt(2) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (form_factor.a['a1 * Ang[3,1] * Sq[1,4] * Sq[1,5]^2 * Ang[1,2] 
		+ form_factor.a['a2 * Ang[3,2] * Sq[2,4] * Sq[1,5]^2 * Ang[1,2] 
		+ form_factor.a['a3 * Ang[3,5] * Sq[5,4] * Sq[1,5]^2 * Ang[1,2] 
		+ 2 * form_factor.a['a7 * Sq[1,5] * Sq[2,5] * Ang[1,2] * Ang[2,3] * Sq[4,1] 
		+ ( s[1,2] * form_factor.a['a4 + s[1,2] * form_factor.a['a5 + (s[1,2] + s[1,5] + s[2,5]) * form_factor.a['a6 - 2 * s[1,5] * form_factor.a['a7 ) * Sq[1,5] * Ang[2,3] * Sq[4,5] )

MRRLLL_4 = (alpha_s / (2 * pi))^(3/2) * C4 * gW * sqrt(2) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (form_factor.a['a1 * Ang[3,1] * Sq[1,4] * Ang[1,5]^2 * Sq[2,1] 
		+ form_factor.a['a2 * Ang[3,2] * Sq[2,4] * Ang[1,5]^2 * Sq[2,1] 
		+ form_factor.a['a3 * Ang[3,5] * Sq[5,4] * Ang[1,5]^2 * Sq[2,1] 
		+ 2 * form_factor.a['a7 * Ang[1,5] * Ang[2,5] * Sq[2,1] * Sq[2,4] * Ang[3,1] 
		+ ( s[1,2] * form_factor.a['a4 + s[1,2] * form_factor.a['a5 + (s[1,2] + s[1,5] + s[2,5]) * form_factor.a['a6 - 2 * s[1,5] * form_factor.a['a7 ) * Ang[5,1] * Sq[2,4] * Ang[3,5] )

MRRRLL_4 = (alpha_s / (2 * pi))^(3/2) * C4 * gW * sqrt(2) * 1 / (s[3,4] - mW^2 + I * mW * Gamma_W) 
		* (( s[1,2] * form_factor.a['a1 + s[1,2] * form_factor.a['a2 + (s[1,2] + s[1,5] + s[2,5]) * form_factor.a['a3 + 2 * s[2,5] * form_factor.a['a7 ) * Sq[2,5] * Sq[5,4] * Ang[3,1] 
		+ form_factor.a['a4 * Ang[3,1] * Sq[1,4] * Sq[2,5]^2 * Ang[2,1] 
		+ form_factor.a['a5 * Ang[3,2] * Sq[2,4] * Sq[2,5]^2 * Ang[2,1] 
		+ form_factor.a['a6 * Ang[3,5] * Sq[5,4] * Sq[2,5]^2 * Ang[2,1] 
		+ 2 * form_factor.a['a7 * Sq[1,5] * Sq[2,5] * Ang[2,1] * Sq[2,4] * Ang[3,1] )










