DOUBLE-REAL HELICITY AMPLITUDES

<!-- Helicities: quark - antiquark - gluon_5 - gluon_6 - lepton - antilepton -->

--------------------------------------------------------------------------------------


M4_LRLLLL = 4 * C1 * Cf * gw / (pV^2 - mV^2) * 1 / (s25 + s26 + s56) * ( Nc * ((square(p1, p2) * square(p1, p4) * square(p2, p4) * angle(p3, p4) * angle(p2, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p2) * square(p1, p4) * square(p2, p4) * angle(p3, p4) * angle(p2, p6)) / (square(p1, p5) * square(p5, p6)) + (square(p1, p2) * square(p1, p4) * angle(p3, p4) * square(p4, p5) * angle(p5, p6)) / (square(p1, p5) * square(p5, p6)) - (square(p1, p2) * square(p1, p4) * angle(p3, p4) * square(p4, p6) * angle(p5, p6)) / (square(p5, p6) * square(p1, p6))) - 2 * Cf * ((square(p1, p2)^2 * square(p1, p4) * angle(p3, p4) * square(p4, p5) * angle(p5, p6)) / (square(p1, p5) * square(p2, p5) * square(p1, p6)) - (square(p1, p2)^2 * square(p1, p4) * angle(p3, p4) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2)^2 * square(p1, p4) * square(p2, p4) * angle(p3, p4) * angle(p2, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2)^2 * square(p1, p4) * square(p2, p4) * angle(p3, p4) * angle(p2, p6)) / (square(p1, p5) * square(p2, p5) * square(p1, p6))) )



M4_RLLLLL = 4 * C2 * Cf * gw / (pV^2 - mV^2) * ( - 2 * Cf * ((square(p1, p2) * angle(p2, p3) * square(p3, p4) * angle(p3, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p5)) + (square(p3, p4) * angle(p3, p5) * angle(p3, p6)) / (square(p1, p5) * square(p2, p6)) + (square(p3, p4) * angle(p3, p5) * angle(p3, p6)) / (square(p1, p6) * square(p2, p5))) + 2 * Cf * 1 / (s25 + s26 + s56) * ((square(p1, p2)^2 * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p2, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p5)) + (square(p1, p2)^2 * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p2, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p3, p5) * angle(p2, p6)) / (square(p1, p6) * square(p2, p5)) + (square(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p2, p5) * angle(p3, p6)) / (square(p1, p5) * square(p2, p6)) + (square(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p2, p6) * angle(p3, p6)) / (square(p1, p5) * square(p2, p5)) + (square(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p2, p5) * angle(p3, p5)) / (square(p1, p6) * square(p2, p6)) - (square(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p5, p6)) / (square(p1, p6) * square(p2, p5)) + (square(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p5, p6)) / (square(p1, p5) * square(p2, p6)) - (angle(p1, p3) * square(p1, p5) * square(p3, p4) * angle(p3, p5) * angle(p5, p6)) / (square(p1, p6) * square(p2, p5)) - (angle(p1, p3) * square(p1, p6) * square(p3, p4) * angle(p3, p6) * angle(p5, p6)) / (square(p1, p5) * square(p2, p6)) - (angle(p1, p3) * square(p3, p4) * angle(p3, p6) * angle(p5, p6)) / (square(p2, p5)) + (angle(p1, p3) * square(p3, p4) * angle(p3, p5) * angle(p5, p6)) / (square(p2, p6))) - Nc * 1 / (s15 + s16 + s56) * ((angle(p2, p3) * angle(p1, p6) * square(p3, p4) * angle(p3, p5)) / (square(p5, p6)) + (angle(p2, p3) * angle(p1, p5) * square(p3, p4) * angle(p3, p6)) / (square(p5, p6)) + (s16 * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p5) * square(p5, p6)) + (s15 * angle(p2, p3) * square(p3, p4) * angle(p3, p5)) / (square(p1, p6) * square(p5, p6))) - Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p2, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p2, p6)) / (square(p1, p5) * square(p5, p6)) + (angle(p1, p3) * square(p3, p4) * square(p1, p5) * angle(p2, p5) * angle(p3, p5)) / (square(p1, p6) * square(p5, p6)) + (angle(p1, p3) * square(p3, p4) * square(p1, p6) * angle(p2, p6) * angle(p3, p6)) / (square(p1, p5) * square(p5, p6)) + (angle(p1, p3) * square(p3, p4) * angle(p2, p5) * angle(p3, p6)) / (square(p5, p6)) + (angle(p1, p3) * square(p3, p4) * angle(p2, p6) * angle(p3, p5)) / (square(p5, p6))) )



M4_LLLLLL = 2 * C3 * Cf * gw / (pV^2 - mV^2) * 1 / (s25 + s26 + s56) * ( 2 * Cf * ((square(p1, p2)^2 * square(p1, p4) * angle(p2, p3) * angle(p2, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p5)) + (square(p1, p2)^2 * square(p1, p4) * angle(p2, p3) * angle(p2, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2) * square(p1, p4) * angle(p2, p6) * angle(p3, p5)) / (square(p1, p6) * square(p2, p5)) + (square(p1, p2) * square(p1, p4) * angle(p2, p5) * angle(p3, p5)) / (square(p1, p6) * square(p2, p6)) + (square(p1, p2) * square(p1, p4) * angle(p2, p6) * angle(p3, p6)) / (square(p1, p5) * square(p2, p5)) + (square(p1, p2) * square(p1, p4) * angle(p2, p5) * angle(p3, p6)) / (square(p1, p5) * square(p2, p6)) + (square(p1, p2) * angle(p2, p3) * square(p1, p4) * angle(p5, p6)) / (square(p1, p5) * square(p2, p6)) - (square(p1, p2) * angle(p2, p3) * square(p1, p4) * angle(p5, p6)) / (square(p1, p6) * square(p2, p5)) + (square(p1, p4) * square(p1, p6) * angle(p3, p6) * angle(p5, p6)) / (square(p1, p5) * square(p2, p6)) - (square(p1, p4) * square(p1, p5) * angle(p3, p5) * angle(p5, p6)) / (square(p1, p6) * square(p2, p5)) + (square(p1, p4) * angle(p3, p5) * angle(p5, p6)) / (square(p2, p6)) - (square(p1, p4) * angle(p3, p6) * angle(p5, p6)) / (square(p2, p5))) + Nc * ((square(p1, p2) * angle(p2, p3) * square(p1, p4) * angle(p2, p5) * angle(p5, p6)) / (square(p1, p6) * square(p5, p6)) - (square(p1, p2) * angle(p2, p3) * square(p1, p4) * angle(p2, p6) * angle(p5, p6)) / (square(p1, p5) * square(p5, p6)) + (square(p1, p4) * square(p1, p5) * angle(p2, p5) * angle(p3, p5) * angle(p5, p6)) / (square(p1, p6) * square(p5, p6)) - (square(p1, p4) * square(p1, p6) * angle(p2, p6) * angle(p3, p6) * angle(p5, p6)) / (square(p1, p5) * square(p5, p6)) + (square(p1, p4) * angle(p2, p5) * angle(p3, p6) * angle(p5, p6)) / (square(p5, p6)) - (square(p1, p4) * angle(p2, p6) * angle(p3, p5) * angle(p5, p6)) / (square(p5, p6))) )



M4_RRLLLL = 2 * C4 * Cf * gw / (pV^2 - mV^2) * ( 2 * Cf * ((square(p1, p2) * square(p2, p4) * angle(p3, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2) * square(p2, p4) * angle(p3, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p5))) - 2 * Cf * 1 / (s25 + s26 + s56) * ((square(p1, p2)^2 * angle(p1, p3) * square(p2, p4) * angle(p2, p6)) / (square(p1, p5) * square(p2, p5) * square(p1, p6)) + (square(p1, p2)^2 * angle(p1, p3) * square(p2, p4) * angle(p2, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2)^2 * angle(p1, p3) * square(p4, p5) * angle(p5, p6)) / (square(p1, p5) * square(p2, p5) * square(p1, p6)) - (square(p1, p2)^2 * angle(p1, p3) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p6))) + Nc * (s15 + s16) / (s15 + s16 + s56) * ((square(p2, p4) * angle(p3, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p2, p4) * angle(p3, p6)) / (square(p1, p5) * square(p5, p6))) + Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * angle(p1, p3) * square(p2, p4) * angle(p2, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p2) * angle(p1, p3) * square(p2, p4) * angle(p2, p6)) / (square(p1, p5) * square(p5, p6)) + (square(p1, p2) * angle(p1, p3) * square(p4, p5) * angle(p5, p6)) / (square(p1, p5) * square(p5, p6)) - (square(p1, p2) * angle(p1, p3) * square(p4, p6) * angle(p5, p6)) / (square(p1, p6) * square(p5, p6))) )



M4_LRLRLL = 2 * C1 * Cf * gw / (pV^2 - mV^2) * ( 4 * Cf * (square(p1, p2) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + 4 * Cf * 1 / (s15 + s16 + s56) * ((square(p1, p4) * square(p2, p4) * angle(p1, p5) * square(p1, p6) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6)) - (square(p1, p6) * square(p2, p4) * angle(p3, p4) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * square(p1, p4) * square(p2, p4) * square(p2, p6) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) - (square(p1, p2) * square(p1, p4) * angle(p1, p5) * square(p2, p6) * angle(p3, p4) * square(p4, p5)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) - (square(p1, p2) * square(p1, p4) * square(p2, p6) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * square(p2, p5))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * square(p1, p4) * square(p2, p4) * angle(p2, p5) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (s * square(p1, p4) * angle(p3, p4) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (square(p1, p4) * square(p1, p6) * square(p2, p4) * angle(p2, p5) * angle(p3, p4)) / (square(p1, p5) * angle(p2, p6)) + (square(p1, p4) * square(p1, p6) * angle(p3, p4) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p2, p6))) + 4 * Cf * 1 / (s15 + s16 + s56) * ((angle(p1, p5) * square(p1, p6)^2 * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) + (square(p1, p6)^2 * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * square(p5, p6)) - (angle(p1, p5) * square(p1, p6) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p6) * square(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * square(p1, p4) * angle(p1, p5) * square(p2, p4) * angle(p2, p5) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * square(p1, p4) * square(p1, p6) * square(p2, p4) * square(p2, p6) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) - (square(p1, p2) * square(p1, p4) * angle(p1, p5) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6)) - (square(p1, p4) * square(p1, p6) * square(p2, p6) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * square(p5, p6)) - (square(p1, p4) * angle(p1, p5) * square(p1, p6) * square(p2, p6) * angle(p3, p4) * square(p4, p5)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) - (square(p1, p4) * angle(p1, p5) * square(p1, p6) * square(p2, p5) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6))) - Nc * (s15 - s16 - s56) / (s56(s15 + s16 + s56)) * (square(p1, p4) * angle(p1, p5) * square(p1, p6) * square(p2, p4) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6)) - Nc * (s25 - s26 - s56) / (s56(s25 + s26 + s56)) * (square(p1, p4) * angle(p1, p5) * square(p1, p6) * square(p2, p4) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6)) )



M4_RLLRLL = 2 * C2 * Cf * gw / (pV^2 - mV^2) * ( - 4 * Cf * ((angle(p1, p2) * angle(p2, p3) * square(p3, p4) * angle(p3, p5)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (square(p1, p2) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (square(p3, p4) * angle(p3, p5) * angle(p3, p6)) / (angle(p1, p6) * square(p2, p5))) - 4 * Cf * 1 / (s15 + s16 + s56) * ((angle(p1, p3) * angle(p2, p3) * angle(p1, p5) * square(p1, p6) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6)) + (angle(p1, p5) * angle(p2, p3) * square(p3, p4) * angle(p3, p5) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6))) - 4 * Cf * 1 / (s25 + s26 + s56) * ((s * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (s * angle(p1, p3) * angle(p3, p5) * square(p3, p4) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) - (s * angle(p1, p3) * angle(p2, p3) * angle(p2, p5) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (s15 * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) - (s15 * angle(p1, p3) * angle(p3, p5) * square(p3, p4) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (angle(p1, p2) * angle(p2, p5) * angle(p1, p3) * angle(p3, p5) * square(p3, p4)) / (angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2) * angle(p2, p5) * square(p1, p6) * angle(p1, p3) * angle(p3, p6) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6))) - 2 * Nc * 1 / (s15 + s16 + s56) * ((angle(p1, p5)^2 * angle(p2, p3) * angle(p3, p5) * square(p3, p4)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p5)^2 * square(p1, p6) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) - (angle(p1, p5)^2 * square(p1, p6) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6))) - 2 * Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * angle(p1, p3) * angle(p1, p5) * angle(p2, p3) * angle(p2, p5) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) + (angle(p1, p3) * angle(p1, p5) * angle(p2, p5) * square(p3, p4) * angle(p3, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p6) * angle(p2, p3) * square(p2, p6) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p6) * square(p3, p4) * angle(p3, p5) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6))) + Nc * ((s15 - s16 - s56)) / (s56(s15 + s16 + s56))(angle(p1, p3) * angle(p1, p5) * square(p1, p6) * angle(p2, p3) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6)) + Nc * ((s25 - s26 - s56)) / (s56(s25 + s26 + s56))(angle(p1, p3) * angle(p1, p5) * square(p1, p6) * angle(p2, p3) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6)) )



M4_LLLRLL = C3 * Cf * gw / (pV^2 - mV^2) * ( 4 * Cf * ((square(p1, p2) * angle(p2, p3) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (angle(p3, p5) * square(p4, p6)) / (angle(p1, p6) * square(p2, p5))) + 4 * Cf * 1 / (s15 + s16 + s56) * ((square(p1, p4) * angle(p1, p5) * square(p1, p6) * angle(p2, p3)) / (square(p1, p5) * angle(p1, p6)) - (square(p1, p6) * angle(p2, p3) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * square(p1, p4) * angle(p2, p3) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (s * square(p1, p4) * angle(p3, p5) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (s * square(p1, p4) * angle(p2, p3) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (square(p1, p4) * angle(p1, p5) * angle(p2, p3) * square(p2, p6)) / (angle(p1, p6) * square(p2, p5)) + (square(p1, p4) * angle(p1, p5) * angle(p3, p5) * square(p5, p6)) / (angle(p1, p6) * square(p2, p5)) - (angle(p1, p2) * square(p1, p4) * square(p2, p6) * angle(p3, p5)) / (angle(p1, p6) * square(p2, p5)) - (angle(p1, p2) * square(p1, p4) * square(p1, p6) * square(p2, p6) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5))) + 2 * Nc * 1 / (s15 + s16 + s56) * ((angle(p1, p5) * square(p1, p6) * angle(p2, p3) * square(p4, p6) * angle(p5, p6)) / (angle(p1, p6) * square(p5, p6)) - (square(p1, p6)^2 * angle(p2, p3) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * square(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * square(p1, p4) * angle(p1, p5) * angle(p2, p3) * angle(p2, p5)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) + (square(p1, p4) * angle(p1, p5) * angle(p2, p5) * angle(p3, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p2, p5) * square(p1, p6) * angle(p1, p5) * angle(p3, p6) * square(p1, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) - (angle(p2, p5) * square(p1, p6) * angle(p1, p5) * angle(p3, p6) * square(p1, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * square(p1, p4) * square(p1, p6) * square(p2, p6) * angle(p2, p3)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) + (angle(p1, p2) * square(p1, p6) * angle(p3, p5) * square(p1, p4)) / (square(p1, p5) * angle(p1, p6))) - Nc * ((s15 - s16 - s56)) / (s56(s15 + s16 + s56))(square(p1, p4) * angle(p1, p5) * square(p1, p6) * angle(p2, p3)) / (square(p1, p5) * angle(p1, p6)) - Nc * ((s25 - s26 - s56)) / (s56(s25 + s26 + s56))(square(p1, p4) * angle(p1, p5) * square(p1, p6) * angle(p2, p3)) / (square(p1, p5) * angle(p1, p6)) )



M4_RRLRLL = C4 * Cf * gw / (pV^2 - mV^2) * ( 4 * Cf * ((angle(p1, p2) * square(p2, p4) * square(p2, p6) * angle(p3, p5)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (square(p2, p6) * angle(p3, p5) * square(p4, p6)) / (square(p1, p5) * angle(p2, p6))) + 4 * Cf * 1 / (s15 + s16 + s56) * ((angle(p1, p3) * angle(p1, p5) * square(p1, p6) * square(p2, p4)) / (square(p1, p5) * angle(p1, p6)) + (angle(p1, p5) * square(p2, p4) * angle(p3, p5) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * angle(p1, p3) * square(p2, p4) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (s * angle(p1, p3) * square(p2, p4) * angle(p2, p5)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (s * angle(p1, p3) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (square(p1, p2) * angle(p1, p3) * angle(p1, p5) * square(p2, p6) * square(p4, p5)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) - (square(p1, p2) * angle(p1, p3) * square(p2, p6) * square(p4, p6)) / (square(p1, p5) * square(p2, p5)) + (angle(p1, p3) * square(p1, p6) * square(p2, p4) * angle(p2, p5)) / (square(p1, p5) * angle(p2, p6)) - (angle(p1, p3) * square(p1, p6) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p2, p6))) + 2 * Nc * 1 / (s15 + s16 + s56) * ((angle(p1, p5)^2 * square(p2, p4) * angle(p3, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p5)^2 * square(p1, p6) * square(p2, p4) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) - (angle(p1, p5)^2 * square(p1, p6) * square(p2, p4) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ( - (square(p1, p2) * angle(p1, p3) * angle(p1, p5) * square(p2, p4) * angle(p2, p5)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) + (square(p1, p2) * angle(p1, p3) * angle(p1, p5) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p6) * square(p2, p4) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) + (angle(p1, p3) * angle(p1, p5) * square(p1, p6) * square(p2, p6) * square(p4, p5)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) + (angle(p1, p3) * angle(p1, p6) * square(p1, p6) * square(p2, p6) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) - (angle(p1, p3) * angle(p1, p5) * square(p1, p6) * square(p2, p5) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6))) - Nc * (s15 - s16 - s56) / (s56(s15 + s16 + s56))(angle(p1, p3) * angle(p1, p5) * square(p1, p6) * square(p2, p4)) / (square(p1, p5) * angle(p1, p6)) - Nc * (s25 - s26 - s56) / (s56(s25 + s26 + s56))(angle(p1, p3) * angle(p1, p5) * square(p1, p6) * square(p2, p4)) / (square(p1, p5) * angle(p1, p6)) )



M4_LRRLLL = 2 * C1 * Cf * gw / (pV^2 - mV^2) * ( - 4 * Cf * (square(p1, p2) * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) + 4 * Cf * 1 / (s15 + s16 + s56) * ((square(p1, p4) * square(p1, p5) * angle(p1, p6) * square(p2, p4) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6)) + (square(p1, p5) * square(p2, p4) * angle(p3, p4) * square(p4, p5) * angle(p5, p6)) / (angle(p1, p5) * square(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * square(p1, p4) * square(p2, p4) * angle(p2, p6) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + (s * square(p1, p4) * angle(p3, p4) * square(p4, p5) * angle(p5, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + (s * square(p1, p4) * square(p2, p4) * square(p2, p5) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p4) * square(p1, p5) * square(p2, p4) * angle(p2, p6) * angle(p3, p4)) / (square(p1, p6) * angle(p2, p5)) + (square(p1, p4) * square(p1, p5) * angle(p3, p4) * square(p4, p5) * angle(p5, p6)) / (square(p1, p6) * angle(p2, p5)) - (square(p1, p2) * square(p1, p4) * square(p2, p5) * angle(p3, p4) * square(p4, p5)) / (square(p1, p6) * square(p2, p6)) - (square(p1, p2) * square(p1, p4) * angle(p1, p6) * square(p2, p5) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6))) + 2 * Nc * 1 / (s15 + s16 + s56) * ((square(p1, p5)^2 * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p5)^2 * angle(p1, p6) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) - (square(p1, p5)^2 * angle(p1, p6) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ((angle(p1, p2) * square(p1, p4) * square(p1, p5) * square(p2, p4) * square(p2, p5) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) - (square(p1, p4) * square(p1, p5) * square(p2, p5) * angle(p3, p4) * square(p4, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p2) * square(p1, p4) * angle(p1, p6) * square(p2, p4) * angle(p2, p6) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (square(p1, p2) * square(p1, p4) * angle(p1, p6) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p5) * square(p1, p6))) - Nc * ((s15 - s16 - s56)) / (s56(s15 + s16 + s56))(square(p1, p4) * square(p1, p5) * angle(p1, p6) * square(p2, p4) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6)) - Nc * ((s25 - s26 - s56)) / (s56(s25 + s26 + s56))(square(p1, p4) * square(p1, p5) * angle(p1, p6) * square(p2, p4) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6)) )



M4_RLRLLL = 2 * C2 * Cf * gw / (pV^2 - mV^2) * ( - 4 * Cf * (angle(p1, p2) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + 4 * Cf * 1 / (s15 + s16 + s56) * ((angle(p1, p6) * angle(p2, p3) * square(p3, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p1, p6)) - (angle(p1, p3) * square(p1, p5) * angle(p1, p6) * angle(p2, p3) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ( - (s * angle(p1, p3) * angle(p2, p3) * angle(p2, p6) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) - (s * angle(p1, p3) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) - (s * angle(p1, p3) * square(p3, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p5) * angle(p2, p6) * square(p3, p4) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p6) * angle(p2, p6) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) - (angle(p1, p3) * angle(p1, p6) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p5) * square(p2, p6)) + (angle(p1, p3) * angle(p1, p6) * square(p3, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p2, p6))) + 2 * Nc * 1 / (s15 + s16 + s56) * ( - (square(p1, p5) * angle(p1, p6)^2 * angle(p2, p3) * square(p3, p4) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) - (angle(p1, p6)^2 * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * angle(p5, p6)) + (square(p1, p5) * angle(p1, p6) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p6) * angle(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ( - (angle(p1, p2) * angle(p1, p3) * square(p1, p5) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) - (square(p1, p2) * angle(p1, p3) * angle(p1, p6) * angle(p2, p3) * angle(p2, p6) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p5) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6)) + (angle(p1, p3) * angle(p1, p6) * square(p1, p5) * angle(p2, p5) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) - (angle(p1, p3) * square(p1, p5) * angle(p1, p6) * angle(p2, p6) * square(p3, p4) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) - (angle(p1, p3) * angle(p1, p6) * angle(p2, p6) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * angle(p5, p6))) + Nc * (s15 - s16 - s56) / (s56(s15 + s16 + s56))(angle(p1, p3) * square(p1, p5) * angle(p1, p6) * angle(p2, p3) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6)) + Nc * (s25 - s26 - s56) / (s56(s25 + s26 + s56))(angle(p1, p3) * square(p1, p5) * angle(p1, p6) * angle(p2, p3) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6)) )


 
M4_LLRLLL = C3 * Cf * gw / (pV^2 - mV^2) * ( 4 * Cf * ((square(p1, p2) * angle(p2, p3) * square(p4, p5)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) + (angle(p3, p6) * square(p4, p5)) / (angle(p1, p5) * square(p2, p6))) + 4 * Cf * 1 / (s15 + s16 + s56) * ((square(p1, p4) * square(p1, p5) * angle(p1, p6) * angle(p2, p3)) / (angle(p1, p5) * square(p1, p6)) + (square(p1, p5) * angle(p2, p3) * square(p4, p5) * angle(p5, p6)) / (angle(p1, p5) * square(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * square(p1, p4) * angle(p2, p3) * angle(p2, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + (s * square(p1, p4) * angle(p2, p3) * square(p2, p5)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) - (s * square(p1, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) - (angle(p1, p2) * square(p1, p4) * square(p1, p5) * angle(p2, p6) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) - (angle(p1, p2) * square(p1, p4) * angle(p2, p6) * angle(p3, p6)) / (angle(p1, p5) * angle(p2, p5)) + (square(p1, p4) * angle(p1, p6) * angle(p2, p3) * square(p2, p5)) / (angle(p1, p5) * square(p2, p6)) - (square(p1, p4) * angle(p1, p6) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p2, p6))) + 2 * Nc * 1 / (s15 + s16 + s56) * ((square(p1, p5)^2 * angle(p2, p3) * square(p4, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p5)^2 * angle(p1, p6) * angle(p2, p3) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) - (square(p1, p5)^2 * angle(p1, p6) * angle(p2, p3) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ((angle(p1, p2) * square(p1, p5) * square(p2, p5) * angle(p2, p3) * square(p1, p4)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) + (angle(p1, p2) * square(p1, p4) * square(p1, p5) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6)) + (square(p1, p2) * square(p1, p4) * angle(p1, p6) * angle(p2, p3) * angle(p2, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (square(p1, p4) * square(p1, p5) * angle(p1, p6) * angle(p2, p6) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (square(p1, p4) * angle(p1, p6) * angle(p2, p6) * angle(p3, p6)) / (angle(p1, p5) * angle(p5, p6)) - (square(p1, p4) * square(p1, p5) * angle(p1, p6) * angle(p2, p5) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6))) - Nc * (s15 - s16 - s56) / (s56(s15 + s16 + s56))(square(p1, p4) * square(p1, p5) * angle(p1, p6) * angle(p2, p3)) / (angle(p1, p5) * square(p1, p6)) - Nc * (s25 - s26 - s56) / (s56(s25 + s26 + s56))(square(p1, p4) * square(p1, p5) * angle(p1, p6) * angle(p2, p3)) / (angle(p1, p5) * square(p1, p6)) )



M4_RRRLLL = C4 * Cf * gw / (pV^2 - mV^2) * ( 4 * Cf * ((angle(p1, p2) * square(p2, p4) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + (angle(p3, p6) * square(p4, p5)) / (square(p1, p6) * angle(p2, p5))) + 4 * Cf * 1 / (s15 + s16 + s56) * ((angle(p1, p3) * square(p1, p5) * angle(p1, p6) * square(p2, p4)) / (angle(p1, p5) * square(p1, p6)) - (angle(p1, p6) * square(p2, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * angle(p1, p3) * square(p2, p4) * angle(p2, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p5)) + (s * angle(p1, p3) * square(p4, p5) * angle(p5, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p5)) + (s * angle(p1, p3) * square(p2, p4) * square(p2, p5)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) + (angle(p1, p3) * square(p1, p5) * square(p2, p4) * angle(p2, p6)) / (square(p1, p6) * angle(p2, p5)) + (angle(p1, p3) * square(p1, p5) * square(p4, p5) * angle(p5, p6)) / (square(p1, p6) * angle(p2, p5)) - (square(p1, p2) * angle(p1, p3) * square(p2, p5) * square(p4, p5)) / (square(p1, p6) * square(p2, p6)) - (square(p1, p2) * angle(p1, p3) * angle(p1, p6) * square(p2, p5) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6))) + 2 * Nc * 1 / (s15 + s16 + s56) * ((square(p1, p5) * angle(p1, p6)^2 * square(p2, p4) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (angle(p1, p6)^2 * square(p2, p4) * angle(p3, p6)) / (angle(p1, p5) * angle(p5, p6)) - (square(p1, p5) * angle(p1, p6) * square(p2, p4) * angle(p3, p6)) / (square(p1, p6) * angle(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * angle(p1, p3) * angle(p1, p6) * square(p4, p5)) / (angle(p1, p5) * square(p1, p6)) - (square(p1, p2) * angle(p1, p3) * angle(p1, p6) * square(p2, p4) * angle(p2, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p5) * square(p2, p4) * square(p2, p5)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) + (angle(p1, p3) * square(p1, p5) * square(p2, p5) * square(p4, p5)) / (square(p1, p6) * square(p5, p6))) - Nc * (s15 - s16 - s56) / (s56(s15 + s16 + s56))(angle(p1, p3) * square(p1, p5) * angle(p1, p6) * square(p2, p4)) / (angle(p1, p5) * square(p1, p6)) - Nc * (s25 - s26 - s56) / (2s56(s25 + s26 + s56))(angle(p1, p3) * square(p1, p5) * angle(p1, p6) * square(p2, p4)) / (angle(p1, p5) * square(p1, p6)) )



M4_LRRRLL = 4 * C1 * Cf * gw / (pV^2 - mV^2) * ( 2 * Cf * ((angle(p1, p2) * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) + (angle(p3, p4) * square(p4, p5) * square(p4, p6)) / (angle(p1, p5) * angle(p2, p6)) + (angle(p3, p4) * square(p4, p5) * square(p4, p6)) / (angle(p1, p6) * angle(p2, p5))) + 2 * Cf * 1 / (s25 + s26 + s56) * ( - (angle(p1, p2)^2 * square(p1, p4) * square(p2, p4) * square(p2, p6) * angle(p3, p4)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) - (angle(p1, p2)^2 * square(p1, p4) * square(p2, p4) * square(p2, p5) * angle(p3, p4)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (angle(p1, p2) * square(p1, p4) * square(p2, p6) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p6) * angle(p2, p5)) - (angle(p1, p2) * square(p1, p4) * square(p2, p5) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p6) * angle(p2, p6)) - (angle(p1, p2) * square(p1, p4) * square(p2, p6) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * angle(p2, p5)) - (angle(p1, p2) * square(p1, p4) * square(p2, p5) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * angle(p2, p6)) + (angle(p1, p2) * square(p1, p4) * square(p2, p4) * angle(p3, p4) * square(p5, p6)) / (angle(p1, p6) * angle(p2, p5)) - (angle(p1, p2) * square(p1, p4) * square(p2, p4) * angle(p3, p4) * square(p5, p6)) / (angle(p1, p5) * angle(p2, p6)) + (square(p1, p4) * angle(p1, p5) * angle(p3, p4) * square(p4, p5) * square(p5, p6)) / (angle(p1, p6) * angle(p2, p5)) - (square(p1, p4) * angle(p1, p6) * angle(p3, p4) * square(p4, p6) * square(p5, p6)) / (angle(p1, p5) * angle(p2, p6)) + (square(p1, p4) * angle(p3, p4) * square(p4, p6) * square(p5, p6)) / (angle(p2, p5)) - (square(p1, p4) * angle(p3, p4) * square(p4, p5) * square(p5, p6)) / (angle(p2, p6))) + Nc * 1 / (s15 + s16 + s56) * ((square(p1, p6) * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (angle(p5, p6)) + (square(p1, p5) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p5, p6)) + (s16 * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * angle(p5, p6)) + (s15 * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p6) * angle(p5, p6))) + Nc * 1 / (s25 + s26 + s56) * ((angle(p1, p2) * square(p1, p4) * square(p2, p4) * square(p2, p5) * angle(p3, p4)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * square(p1, p4) * square(p2, p4) * square(p2, p6) * angle(p3, p4)) / (angle(p1, p5) * angle(p5, p6)) + (square(p1, p4) * square(p2, p5) * angle(p3, p4) * square(p4, p6)) / (angle(p5, p6)) + (square(p1, p4) * square(p2, p6) * angle(p3, p4) * square(p4, p5)) / (angle(p5, p6)) + (square(p1, p4) * angle(p1, p5) * square(p2, p5) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p6) * angle(p5, p6)) + (square(p1, p4) * angle(p1, p6) * square(p2, p6) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * angle(p5, p6))) )



M4_RLRRLL = 4 * C2 * Cf * gw / (pV^2 - mV^2) * ( 2 * Cf * 1 / (s25 + s26 + s56) * ((angle(p1, p2)^2 * angle(p1, p3) * angle(p2, p3) * square(p2, p6) * square(p3, p4)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) + (angle(p1, p2)^2 * angle(p1, p3) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2)^2 * angle(p1, p3) * square(p3, p4) * angle(p3, p5) * square(p5, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) - (angle(p1, p2)^2 * angle(p1, p3) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6))) + Nc * 1 / (s25 + s26 + s56) * ( - (angle(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p6) * angle(p5, p6)) - (angle(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p2, p6) * square(p3, p4)) / (angle(p1, p5) * angle(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p6) * angle(p5, p6)) - (angle(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p3, p5) * square(p5, p6)) / (angle(p1, p5) * angle(p5, p6))) )



M4_LLRRLL = 2 * C3 * Cf * gw / (pV^2 - mV^2) * ( 2 * Cf * ((angle(p1, p2) * angle(p2, p3) * square(p4, p5)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2) * angle(p2, p3) * square(p4, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5))) + 2 * Cf * 1 / (s25 + s26 + s56) * ( - (angle(p1, p2)^2 * square(p1, p4) * angle(p2, p3) * square(p2, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) - (angle(p1, p2)^2 * square(p1, p4) * angle(p2, p3) * square(p2, p5)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (angle(p1, p2)^2 * square(p1, p4) * angle(p3, p5) * square(p5, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) + (angle(p1, p2)^2 * square(p1, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6))) + Nc * 1 / (s15 + s16 + s56) * ((square(p1, p6) * angle(p2, p3) * square(p4, p5)) / (angle(p1, p6) * angle(p5, p6)) + (square(p1, p5) * angle(p2, p3) * square(p4, p6)) / (angle(p5, p6)) + (s16 * angle(p2, p3) * square(p4, p6)) / (angle(p1, p5) * angle(p5, p6)) + (s15 * angle(p2, p3) * square(p4, p5)) / (angle(p1, p6) * angle(p5, p6))) + Nc * 1 / (s25 + s26 + s56) * ((angle(p1, p2) * square(p1, p4) * angle(p2, p3) * square(p2, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * square(p1, p4) * angle(p2, p3) * square(p2, p6)) / (angle(p1, p5) * angle(p5, p6)) + (angle(p1, p2) * square(p1, p4) * angle(p3, p5) * square(p5, p6)) / (angle(p1, p5) * angle(p5, p6)) - (angle(p1, p2) * square(p1, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p6) * angle(p5, p6))) )



M4_RRRRLL = 2 * C4 * Cf * gw / (pV^2 - mV^2) * ( - 2 * Cf * 1 / (s25 + s26 + s56) * ((angle(p1, p2)^2 * angle(p1, p3) * square(p2, p4) * square(p2, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) + (angle(p1, p2)^2 * angle(p1, p3) * square(p2, p4) * square(p2, p5)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p6) * square(p4, p5)) / (angle(p1, p6) * angle(p2, p5)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p5) * square(p4, p5)) / (angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p6) * square(p4, p6)) / (angle(p1, p5) * angle(p2, p5)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p5) * square(p4, p6)) / (angle(p1, p5) * angle(p2, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p4) * square(p5, p6)) / (angle(p1, p5) * angle(p2, p6)) - (angle(p1, p2) * angle(p1, p3) * square(p2, p4) * square(p5, p6)) / (angle(p1, p6) * angle(p2, p5)) + (angle(p1, p3) * square(p4, p5) * square(p5, p6)) / (angle(p2, p6)) - (angle(p1, p3) * square(p4, p6) * square(p5, p6)) / (angle(p2, p5)) + (angle(p1, p3) * angle(p1, p6) * square(p4, p6) * square(p5, p6)) / (angle(p1, p5) * angle(p2, p6)) - (angle(p1, p3) * angle(p1, p5) * square(p4, p5) * square(p5, p6)) / (angle(p1, p6) * angle(p2, p5))) + Nc * 1 / (s25 + s26 + s56) * ((angle(p1, p2) * angle(p1, p3) * square(p2, p4) * square(p2, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p4) * square(p2, p6)) / (angle(p1, p5) * angle(p5, p6)) + (angle(p1, p3) * square(p2, p5) * square(p4, p6)) / (angle(p5, p6)) + (angle(p1, p3) * square(p2, p6) * square(p4, p5)) / (angle(p5, p6)) + (angle(p1, p3) * square(p2, p5) * angle(p1, p5) * square(p4, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p3) * angle(p1, p6) * square(p2, p6) * square(p4, p6)) / (angle(p1, p5) * angle(p5, p6))) )





M3_LRLLLL = 4 * C1 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * 1 / (s25 + s26 + s56) * ( Nc * ((square(p1, p2) * square(p1, p4) * square(p2, p4) * angle(p3, p4) * angle(p2, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p2) * square(p1, p4) * square(p2, p4) * angle(p3, p4) * angle(p2, p6)) / (square(p1, p5) * square(p5, p6)) + (square(p1, p2) * square(p1, p4) * angle(p3, p4) * square(p4, p5) * angle(p5, p6)) / (square(p1, p5) * square(p5, p6)) - (square(p1, p2) * square(p1, p4) * angle(p3, p4) * square(p4, p6) * angle(p5, p6)) / (square(p5, p6) * square(p1, p6))) - 2 * Cf * ((square(p1, p2)^2 * square(p1, p4) * angle(p3, p4) * square(p4, p5) * angle(p5, p6)) / (square(p1, p5) * square(p2, p5) * square(p1, p6)) - (square(p1, p2)^2 * square(p1, p4) * angle(p3, p4) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2)^2 * square(p1, p4) * square(p2, p4) * angle(p3, p4) * angle(p2, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2)^2 * square(p1, p4) * square(p2, p4) * angle(p3, p4) * angle(p2, p6)) / (square(p1, p5) * square(p2, p5) * square(p1, p6))) )



M3_RLLLLL = 4 * C2 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( - 2 * Cf * ((square(p1, p2) * angle(p2, p3) * square(p3, p4) * angle(p3, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p5)) + (square(p3, p4) * angle(p3, p5) * angle(p3, p6)) / (square(p1, p5) * square(p2, p6)) + (square(p3, p4) * angle(p3, p5) * angle(p3, p6)) / (square(p1, p6) * square(p2, p5))) + 2 * Cf * 1 / (s25 + s26 + s56) * ((square(p1, p2)^2 * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p2, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p5)) + (square(p1, p2)^2 * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p2, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p3, p5) * angle(p2, p6)) / (square(p1, p6) * square(p2, p5)) + (square(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p2, p5) * angle(p3, p6)) / (square(p1, p5) * square(p2, p6)) + (square(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p2, p6) * angle(p3, p6)) / (square(p1, p5) * square(p2, p5)) + (square(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p2, p5) * angle(p3, p5)) / (square(p1, p6) * square(p2, p6)) - (square(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p5, p6)) / (square(p1, p6) * square(p2, p5)) + (square(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p5, p6)) / (square(p1, p5) * square(p2, p6)) - (angle(p1, p3) * square(p1, p5) * square(p3, p4) * angle(p3, p5) * angle(p5, p6)) / (square(p1, p6) * square(p2, p5)) - (angle(p1, p3) * square(p1, p6) * square(p3, p4) * angle(p3, p6) * angle(p5, p6)) / (square(p1, p5) * square(p2, p6)) - (angle(p1, p3) * square(p3, p4) * angle(p3, p6) * angle(p5, p6)) / (square(p2, p5)) + (angle(p1, p3) * square(p3, p4) * angle(p3, p5) * angle(p5, p6)) / (square(p2, p6))) - Nc * 1 / (s15 + s16 + s56) * ((angle(p2, p3) * angle(p1, p6) * square(p3, p4) * angle(p3, p5)) / (square(p5, p6)) + (angle(p2, p3) * angle(p1, p5) * square(p3, p4) * angle(p3, p6)) / (square(p5, p6)) + (s16 * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p5) * square(p5, p6)) + (s15 * angle(p2, p3) * square(p3, p4) * angle(p3, p5)) / (square(p1, p6) * square(p5, p6))) - Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p2, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * angle(p2, p6)) / (square(p1, p5) * square(p5, p6)) + (angle(p1, p3) * square(p3, p4) * square(p1, p5) * angle(p2, p5) * angle(p3, p5)) / (square(p1, p6) * square(p5, p6)) + (angle(p1, p3) * square(p3, p4) * square(p1, p6) * angle(p2, p6) * angle(p3, p6)) / (square(p1, p5) * square(p5, p6)) + (angle(p1, p3) * square(p3, p4) * angle(p2, p5) * angle(p3, p6)) / (square(p5, p6)) + (angle(p1, p3) * square(p3, p4) * angle(p2, p6) * angle(p3, p5)) / (square(p5, p6))) )



M3_LLLLLL = 2 * C3 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * 1 / (s25 + s26 + s56) * ( 2 * Cf * ((square(p1, p2)^2 * square(p1, p4) * angle(p2, p3) * angle(p2, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p5)) + (square(p1, p2)^2 * square(p1, p4) * angle(p2, p3) * angle(p2, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2) * square(p1, p4) * angle(p2, p6) * angle(p3, p5)) / (square(p1, p6) * square(p2, p5)) + (square(p1, p2) * square(p1, p4) * angle(p2, p5) * angle(p3, p5)) / (square(p1, p6) * square(p2, p6)) + (square(p1, p2) * square(p1, p4) * angle(p2, p6) * angle(p3, p6)) / (square(p1, p5) * square(p2, p5)) + (square(p1, p2) * square(p1, p4) * angle(p2, p5) * angle(p3, p6)) / (square(p1, p5) * square(p2, p6)) + (square(p1, p2) * angle(p2, p3) * square(p1, p4) * angle(p5, p6)) / (square(p1, p5) * square(p2, p6)) - (square(p1, p2) * angle(p2, p3) * square(p1, p4) * angle(p5, p6)) / (square(p1, p6) * square(p2, p5)) + (square(p1, p4) * square(p1, p6) * angle(p3, p6) * angle(p5, p6)) / (square(p1, p5) * square(p2, p6)) - (square(p1, p4) * square(p1, p5) * angle(p3, p5) * angle(p5, p6)) / (square(p1, p6) * square(p2, p5)) + (square(p1, p4) * angle(p3, p5) * angle(p5, p6)) / (square(p2, p6)) - (square(p1, p4) * angle(p3, p6) * angle(p5, p6)) / (square(p2, p5))) + Nc * ((square(p1, p2) * angle(p2, p3) * square(p1, p4) * angle(p2, p5) * angle(p5, p6)) / (square(p1, p6) * square(p5, p6)) - (square(p1, p2) * angle(p2, p3) * square(p1, p4) * angle(p2, p6) * angle(p5, p6)) / (square(p1, p5) * square(p5, p6)) + (square(p1, p4) * square(p1, p5) * angle(p2, p5) * angle(p3, p5) * angle(p5, p6)) / (square(p1, p6) * square(p5, p6)) - (square(p1, p4) * square(p1, p6) * angle(p2, p6) * angle(p3, p6) * angle(p5, p6)) / (square(p1, p5) * square(p5, p6)) + (square(p1, p4) * angle(p2, p5) * angle(p3, p6) * angle(p5, p6)) / (square(p5, p6)) - (square(p1, p4) * angle(p2, p6) * angle(p3, p5) * angle(p5, p6)) / (square(p5, p6))) )



M3_RRLLLL = 2 * C4 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( 2 * Cf * ((square(p1, p2) * square(p2, p4) * angle(p3, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2) * square(p2, p4) * angle(p3, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p5))) - 2 * Cf * 1 / (s25 + s26 + s56) * ((square(p1, p2)^2 * angle(p1, p3) * square(p2, p4) * angle(p2, p6)) / (square(p1, p5) * square(p2, p5) * square(p1, p6)) + (square(p1, p2)^2 * angle(p1, p3) * square(p2, p4) * angle(p2, p5)) / (square(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p2)^2 * angle(p1, p3) * square(p4, p5) * angle(p5, p6)) / (square(p1, p5) * square(p2, p5) * square(p1, p6)) - (square(p1, p2)^2 * angle(p1, p3) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * square(p1, p6) * square(p2, p6))) + Nc * (s15 + s16) / (s15 + s16 + s56) * ((square(p2, p4) * angle(p3, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p2, p4) * angle(p3, p6)) / (square(p1, p5) * square(p5, p6))) + Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * angle(p1, p3) * square(p2, p4) * angle(p2, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p2) * angle(p1, p3) * square(p2, p4) * angle(p2, p6)) / (square(p1, p5) * square(p5, p6)) + (square(p1, p2) * angle(p1, p3) * square(p4, p5) * angle(p5, p6)) / (square(p1, p5) * square(p5, p6)) - (square(p1, p2) * angle(p1, p3) * square(p4, p6) * angle(p5, p6)) / (square(p1, p6) * square(p5, p6))) )



M3_LRLRLL = 2 * C1 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( 4 * Cf * (square(p1, p2) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + 4 * Cf * 1 / (s15 + s16 + s56) * ((square(p1, p4) * square(p2, p4) * angle(p1, p5) * square(p1, p6) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6)) - (square(p1, p6) * square(p2, p4) * angle(p3, p4) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * square(p1, p4) * square(p2, p4) * square(p2, p6) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) - (square(p1, p2) * square(p1, p4) * angle(p1, p5) * square(p2, p6) * angle(p3, p4) * square(p4, p5)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) - (square(p1, p2) * square(p1, p4) * square(p2, p6) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * square(p2, p5))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * square(p1, p4) * square(p2, p4) * angle(p2, p5) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (s * square(p1, p4) * angle(p3, p4) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (square(p1, p4) * square(p1, p6) * square(p2, p4) * angle(p2, p5) * angle(p3, p4)) / (square(p1, p5) * angle(p2, p6)) + (square(p1, p4) * square(p1, p6) * angle(p3, p4) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p2, p6))) + 4 * Cf * 1 / (s15 + s16 + s56) * ((angle(p1, p5) * square(p1, p6)^2 * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) + (square(p1, p6)^2 * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * square(p5, p6)) - (angle(p1, p5) * square(p1, p6) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p6) * square(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * square(p1, p4) * angle(p1, p5) * square(p2, p4) * angle(p2, p5) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * square(p1, p4) * square(p1, p6) * square(p2, p4) * square(p2, p6) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) - (square(p1, p2) * square(p1, p4) * angle(p1, p5) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6)) - (square(p1, p4) * square(p1, p6) * square(p2, p6) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * square(p5, p6)) - (square(p1, p4) * angle(p1, p5) * square(p1, p6) * square(p2, p6) * angle(p3, p4) * square(p4, p5)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) - (square(p1, p4) * angle(p1, p5) * square(p1, p6) * square(p2, p5) * angle(p3, p4) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6))) - Nc * (s15 - s16 - s56) / (s56(s15 + s16 + s56)) * (square(p1, p4) * angle(p1, p5) * square(p1, p6) * square(p2, p4) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6)) - Nc * (s25 - s26 - s56) / (s56(s25 + s26 + s56)) * (square(p1, p4) * angle(p1, p5) * square(p1, p6) * square(p2, p4) * angle(p3, p4)) / (square(p1, p5) * angle(p1, p6)) )



M3_RLLRLL = 2 * C2 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( - 4 * Cf * ((angle(p1, p2) * angle(p2, p3) * square(p3, p4) * angle(p3, p5)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (square(p1, p2) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (square(p3, p4) * angle(p3, p5) * angle(p3, p6)) / (angle(p1, p6) * square(p2, p5))) - 4 * Cf * 1 / (s15 + s16 + s56) * ((angle(p1, p3) * angle(p2, p3) * angle(p1, p5) * square(p1, p6) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6)) + (angle(p1, p5) * angle(p2, p3) * square(p3, p4) * angle(p3, p5) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6))) - 4 * Cf * 1 / (s25 + s26 + s56) * ((s * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (s * angle(p1, p3) * angle(p3, p5) * square(p3, p4) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) - (s * angle(p1, p3) * angle(p2, p3) * angle(p2, p5) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (s15 * angle(p1, p3) * angle(p2, p3) * square(p3, p4) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) - (s15 * angle(p1, p3) * angle(p3, p5) * square(p3, p4) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (angle(p1, p2) * angle(p2, p5) * angle(p1, p3) * angle(p3, p5) * square(p3, p4)) / (angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2) * angle(p2, p5) * square(p1, p6) * angle(p1, p3) * angle(p3, p6) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6))) - 2 * Nc * 1 / (s15 + s16 + s56) * ((angle(p1, p5)^2 * angle(p2, p3) * angle(p3, p5) * square(p3, p4)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p5)^2 * square(p1, p6) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) - (angle(p1, p5)^2 * square(p1, p6) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6))) - 2 * Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * angle(p1, p3) * angle(p1, p5) * angle(p2, p3) * angle(p2, p5) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) + (angle(p1, p3) * angle(p1, p5) * angle(p2, p5) * square(p3, p4) * angle(p3, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p6) * angle(p2, p3) * square(p2, p6) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p6) * square(p3, p4) * angle(p3, p5) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6))) + Nc * ((s15 - s16 - s56)) / (s56(s15 + s16 + s56))(angle(p1, p3) * angle(p1, p5) * square(p1, p6) * angle(p2, p3) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6)) + Nc * ((s25 - s26 - s56)) / (s56(s25 + s26 + s56))(angle(p1, p3) * angle(p1, p5) * square(p1, p6) * angle(p2, p3) * square(p3, p4)) / (square(p1, p5) * angle(p1, p6)) )



M3_LLLRLL = C3 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( 4 * Cf * ((square(p1, p2) * angle(p2, p3) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (angle(p3, p5) * square(p4, p6)) / (angle(p1, p6) * square(p2, p5))) + 4 * Cf * 1 / (s15 + s16 + s56) * ((square(p1, p4) * angle(p1, p5) * square(p1, p6) * angle(p2, p3)) / (square(p1, p5) * angle(p1, p6)) - (square(p1, p6) * angle(p2, p3) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * square(p1, p4) * angle(p2, p3) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (s * square(p1, p4) * angle(p3, p5) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (s * square(p1, p4) * angle(p2, p3) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (square(p1, p4) * angle(p1, p5) * angle(p2, p3) * square(p2, p6)) / (angle(p1, p6) * square(p2, p5)) + (square(p1, p4) * angle(p1, p5) * angle(p3, p5) * square(p5, p6)) / (angle(p1, p6) * square(p2, p5)) - (angle(p1, p2) * square(p1, p4) * square(p2, p6) * angle(p3, p5)) / (angle(p1, p6) * square(p2, p5)) - (angle(p1, p2) * square(p1, p4) * square(p1, p6) * square(p2, p6) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5))) + 2 * Nc * 1 / (s15 + s16 + s56) * ((angle(p1, p5) * square(p1, p6) * angle(p2, p3) * square(p4, p6) * angle(p5, p6)) / (angle(p1, p6) * square(p5, p6)) - (square(p1, p6)^2 * angle(p2, p3) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * square(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * square(p1, p4) * angle(p1, p5) * angle(p2, p3) * angle(p2, p5)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) + (square(p1, p4) * angle(p1, p5) * angle(p2, p5) * angle(p3, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p2, p5) * square(p1, p6) * angle(p1, p5) * angle(p3, p6) * square(p1, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) - (angle(p2, p5) * square(p1, p6) * angle(p1, p5) * angle(p3, p6) * square(p1, p4)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * square(p1, p4) * square(p1, p6) * square(p2, p6) * angle(p2, p3)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) + (angle(p1, p2) * square(p1, p6) * angle(p3, p5) * square(p1, p4)) / (square(p1, p5) * angle(p1, p6))) - Nc * ((s15 - s16 - s56)) / (s56(s15 + s16 + s56))(square(p1, p4) * angle(p1, p5) * square(p1, p6) * angle(p2, p3)) / (square(p1, p5) * angle(p1, p6)) - Nc * ((s25 - s26 - s56)) / (s56(s25 + s26 + s56))(square(p1, p4) * angle(p1, p5) * square(p1, p6) * angle(p2, p3)) / (square(p1, p5) * angle(p1, p6)) )



M3_RRLRLL = C4 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( 4 * Cf * ((angle(p1, p2) * square(p2, p4) * square(p2, p6) * angle(p3, p5)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (square(p2, p6) * angle(p3, p5) * square(p4, p6)) / (square(p1, p5) * angle(p2, p6))) + 4 * Cf * 1 / (s15 + s16 + s56) * ((angle(p1, p3) * angle(p1, p5) * square(p1, p6) * square(p2, p4)) / (square(p1, p5) * angle(p1, p6)) + (angle(p1, p5) * square(p2, p4) * angle(p3, p5) * square(p5, p6)) / (square(p1, p5) * angle(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * angle(p1, p3) * square(p2, p4) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) + (s * angle(p1, p3) * square(p2, p4) * angle(p2, p5)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (s * angle(p1, p3) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (square(p1, p2) * angle(p1, p3) * angle(p1, p5) * square(p2, p6) * square(p4, p5)) / (square(p1, p5) * angle(p1, p6) * square(p2, p5)) - (square(p1, p2) * angle(p1, p3) * square(p2, p6) * square(p4, p6)) / (square(p1, p5) * square(p2, p5)) + (angle(p1, p3) * square(p1, p6) * square(p2, p4) * angle(p2, p5)) / (square(p1, p5) * angle(p2, p6)) - (angle(p1, p3) * square(p1, p6) * square(p4, p6) * angle(p5, p6)) / (square(p1, p5) * angle(p2, p6))) + 2 * Nc * 1 / (s15 + s16 + s56) * ((angle(p1, p5)^2 * square(p2, p4) * angle(p3, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p5)^2 * square(p1, p6) * square(p2, p4) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) - (angle(p1, p5)^2 * square(p1, p6) * square(p2, p4) * angle(p3, p6)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ( - (square(p1, p2) * angle(p1, p3) * angle(p1, p5) * square(p2, p4) * angle(p2, p5)) / (square(p1, p5) * angle(p1, p6) * angle(p5, p6)) + (square(p1, p2) * angle(p1, p3) * angle(p1, p5) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p6) * square(p2, p4) * square(p2, p6)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) + (angle(p1, p3) * angle(p1, p5) * square(p1, p6) * square(p2, p6) * square(p4, p5)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) + (angle(p1, p3) * angle(p1, p6) * square(p1, p6) * square(p2, p6) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6)) - (angle(p1, p3) * angle(p1, p5) * square(p1, p6) * square(p2, p5) * square(p4, p6)) / (square(p1, p5) * angle(p1, p6) * square(p5, p6))) - Nc * (s15 - s16 - s56) / (s56(s15 + s16 + s56))(angle(p1, p3) * angle(p1, p5) * square(p1, p6) * square(p2, p4)) / (square(p1, p5) * angle(p1, p6)) - Nc * (s25 - s26 - s56) / (s56(s25 + s26 + s56))(angle(p1, p3) * angle(p1, p5) * square(p1, p6) * square(p2, p4)) / (square(p1, p5) * angle(p1, p6)) )



M3_LRRLLL = 2 * C1 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( - 4 * Cf * (square(p1, p2) * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) + 4 * Cf * 1 / (s15 + s16 + s56) * ((square(p1, p4) * square(p1, p5) * angle(p1, p6) * square(p2, p4) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6)) + (square(p1, p5) * square(p2, p4) * angle(p3, p4) * square(p4, p5) * angle(p5, p6)) / (angle(p1, p5) * square(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * square(p1, p4) * square(p2, p4) * angle(p2, p6) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + (s * square(p1, p4) * angle(p3, p4) * square(p4, p5) * angle(p5, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + (s * square(p1, p4) * square(p2, p4) * square(p2, p5) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) + (square(p1, p4) * square(p1, p5) * square(p2, p4) * angle(p2, p6) * angle(p3, p4)) / (square(p1, p6) * angle(p2, p5)) + (square(p1, p4) * square(p1, p5) * angle(p3, p4) * square(p4, p5) * angle(p5, p6)) / (square(p1, p6) * angle(p2, p5)) - (square(p1, p2) * square(p1, p4) * square(p2, p5) * angle(p3, p4) * square(p4, p5)) / (square(p1, p6) * square(p2, p6)) - (square(p1, p2) * square(p1, p4) * angle(p1, p6) * square(p2, p5) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6))) + 2 * Nc * 1 / (s15 + s16 + s56) * ((square(p1, p5)^2 * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p5)^2 * angle(p1, p6) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) - (square(p1, p5)^2 * angle(p1, p6) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ((angle(p1, p2) * square(p1, p4) * square(p1, p5) * square(p2, p4) * square(p2, p5) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) - (square(p1, p4) * square(p1, p5) * square(p2, p5) * angle(p3, p4) * square(p4, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p2) * square(p1, p4) * angle(p1, p6) * square(p2, p4) * angle(p2, p6) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (square(p1, p2) * square(p1, p4) * angle(p1, p6) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p5) * square(p1, p6))) - Nc * ((s15 - s16 - s56)) / (s56(s15 + s16 + s56))(square(p1, p4) * square(p1, p5) * angle(p1, p6) * square(p2, p4) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6)) - Nc * ((s25 - s26 - s56)) / (s56(s25 + s26 + s56))(square(p1, p4) * square(p1, p5) * angle(p1, p6) * square(p2, p4) * angle(p3, p4)) / (angle(p1, p5) * square(p1, p6)) )



M3_RLRLLL = 2 * C2 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( - 4 * Cf * (angle(p1, p2) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + 4 * Cf * 1 / (s15 + s16 + s56) * ((angle(p1, p6) * angle(p2, p3) * square(p3, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p1, p6)) - (angle(p1, p3) * square(p1, p5) * angle(p1, p6) * angle(p2, p3) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ( - (s * angle(p1, p3) * angle(p2, p3) * angle(p2, p6) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) - (s * angle(p1, p3) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) - (s * angle(p1, p3) * square(p3, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p5) * angle(p2, p6) * square(p3, p4) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p6) * angle(p2, p6) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) - (angle(p1, p3) * angle(p1, p6) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p5) * square(p2, p6)) + (angle(p1, p3) * angle(p1, p6) * square(p3, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p2, p6))) + 2 * Nc * 1 / (s15 + s16 + s56) * ( - (square(p1, p5) * angle(p1, p6)^2 * angle(p2, p3) * square(p3, p4) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) - (angle(p1, p6)^2 * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * angle(p5, p6)) + (square(p1, p5) * angle(p1, p6) * angle(p2, p3) * square(p3, p4) * angle(p3, p6)) / (square(p1, p6) * angle(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ( - (angle(p1, p2) * angle(p1, p3) * square(p1, p5) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) - (square(p1, p2) * angle(p1, p3) * angle(p1, p6) * angle(p2, p3) * angle(p2, p6) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p5) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6)) + (angle(p1, p3) * angle(p1, p6) * square(p1, p5) * angle(p2, p5) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) - (angle(p1, p3) * square(p1, p5) * angle(p1, p6) * angle(p2, p6) * square(p3, p4) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) - (angle(p1, p3) * angle(p1, p6) * angle(p2, p6) * square(p3, p4) * angle(p3, p6)) / (angle(p1, p5) * angle(p5, p6))) + Nc * (s15 - s16 - s56) / (s56(s15 + s16 + s56))(angle(p1, p3) * square(p1, p5) * angle(p1, p6) * angle(p2, p3) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6)) + Nc * (s25 - s26 - s56) / (s56(s25 + s26 + s56))(angle(p1, p3) * square(p1, p5) * angle(p1, p6) * angle(p2, p3) * square(p3, p4)) / (angle(p1, p5) * square(p1, p6)) )


 
M3_LLRLLL = C3 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( 4 * Cf * ((square(p1, p2) * angle(p2, p3) * square(p4, p5)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) + (angle(p3, p6) * square(p4, p5)) / (angle(p1, p5) * square(p2, p6))) + 4 * Cf * 1 / (s15 + s16 + s56) * ((square(p1, p4) * square(p1, p5) * angle(p1, p6) * angle(p2, p3)) / (angle(p1, p5) * square(p1, p6)) + (square(p1, p5) * angle(p2, p3) * square(p4, p5) * angle(p5, p6)) / (angle(p1, p5) * square(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * square(p1, p4) * angle(p2, p3) * angle(p2, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + (s * square(p1, p4) * angle(p2, p3) * square(p2, p5)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) - (s * square(p1, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) - (angle(p1, p2) * square(p1, p4) * square(p1, p5) * angle(p2, p6) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) - (angle(p1, p2) * square(p1, p4) * angle(p2, p6) * angle(p3, p6)) / (angle(p1, p5) * angle(p2, p5)) + (square(p1, p4) * angle(p1, p6) * angle(p2, p3) * square(p2, p5)) / (angle(p1, p5) * square(p2, p6)) - (square(p1, p4) * angle(p1, p6) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p2, p6))) + 2 * Nc * 1 / (s15 + s16 + s56) * ((square(p1, p5)^2 * angle(p2, p3) * square(p4, p5)) / (square(p1, p6) * square(p5, p6)) + (square(p1, p5)^2 * angle(p1, p6) * angle(p2, p3) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) - (square(p1, p5)^2 * angle(p1, p6) * angle(p2, p3) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ((angle(p1, p2) * square(p1, p5) * square(p2, p5) * angle(p2, p3) * square(p1, p4)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) + (angle(p1, p2) * square(p1, p4) * square(p1, p5) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6)) + (square(p1, p2) * square(p1, p4) * angle(p1, p6) * angle(p2, p3) * angle(p2, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (square(p1, p4) * square(p1, p5) * angle(p1, p6) * angle(p2, p6) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (square(p1, p4) * angle(p1, p6) * angle(p2, p6) * angle(p3, p6)) / (angle(p1, p5) * angle(p5, p6)) - (square(p1, p4) * square(p1, p5) * angle(p1, p6) * angle(p2, p5) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6))) - Nc * (s15 - s16 - s56) / (s56(s15 + s16 + s56))(square(p1, p4) * square(p1, p5) * angle(p1, p6) * angle(p2, p3)) / (angle(p1, p5) * square(p1, p6)) - Nc * (s25 - s26 - s56) / (s56(s25 + s26 + s56))(square(p1, p4) * square(p1, p5) * angle(p1, p6) * angle(p2, p3)) / (angle(p1, p5) * square(p1, p6)) )



M3_RRRLLL = C4 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( 4 * Cf * ((angle(p1, p2) * square(p2, p4) * angle(p3, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p2, p5)) + (angle(p3, p6) * square(p4, p5)) / (square(p1, p6) * angle(p2, p5))) + 4 * Cf * 1 / (s15 + s16 + s56) * ((angle(p1, p3) * square(p1, p5) * angle(p1, p6) * square(p2, p4)) / (angle(p1, p5) * square(p1, p6)) - (angle(p1, p6) * square(p2, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * square(p1, p6))) + 4 * Cf * 1 / (s25 + s26 + s56) * ((s * angle(p1, p3) * square(p2, p4) * angle(p2, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p5)) + (s * angle(p1, p3) * square(p4, p5) * angle(p5, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p5)) + (s * angle(p1, p3) * square(p2, p4) * square(p2, p5)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6)) + (angle(p1, p3) * square(p1, p5) * square(p2, p4) * angle(p2, p6)) / (square(p1, p6) * angle(p2, p5)) + (angle(p1, p3) * square(p1, p5) * square(p4, p5) * angle(p5, p6)) / (square(p1, p6) * angle(p2, p5)) - (square(p1, p2) * angle(p1, p3) * square(p2, p5) * square(p4, p5)) / (square(p1, p6) * square(p2, p6)) - (square(p1, p2) * angle(p1, p3) * angle(p1, p6) * square(p2, p5) * square(p4, p6)) / (angle(p1, p5) * square(p1, p6) * square(p2, p6))) + 2 * Nc * 1 / (s15 + s16 + s56) * ((square(p1, p5) * angle(p1, p6)^2 * square(p2, p4) * angle(p3, p5)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (angle(p1, p6)^2 * square(p2, p4) * angle(p3, p6)) / (angle(p1, p5) * angle(p5, p6)) - (square(p1, p5) * angle(p1, p6) * square(p2, p4) * angle(p3, p6)) / (square(p1, p6) * angle(p5, p6))) + 2 * Nc * 1 / (s25 + s26 + s56) * ((square(p1, p2) * angle(p1, p3) * angle(p1, p6) * square(p4, p5)) / (angle(p1, p5) * square(p1, p6)) - (square(p1, p2) * angle(p1, p3) * angle(p1, p6) * square(p2, p4) * angle(p2, p6)) / (angle(p1, p5) * square(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p1, p5) * square(p2, p4) * square(p2, p5)) / (angle(p1, p5) * square(p1, p6) * square(p5, p6)) + (angle(p1, p3) * square(p1, p5) * square(p2, p5) * square(p4, p5)) / (square(p1, p6) * square(p5, p6))) - Nc * (s15 - s16 - s56) / (s56(s15 + s16 + s56))(angle(p1, p3) * square(p1, p5) * angle(p1, p6) * square(p2, p4)) / (angle(p1, p5) * square(p1, p6)) - Nc * (s25 - s26 - s56) / (2s56(s25 + s26 + s56))(angle(p1, p3) * square(p1, p5) * angle(p1, p6) * square(p2, p4)) / (angle(p1, p5) * square(p1, p6)) )



M3_LRRRLL = 4 * C1 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( 2 * Cf * ((angle(p1, p2) * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) + (angle(p3, p4) * square(p4, p5) * square(p4, p6)) / (angle(p1, p5) * angle(p2, p6)) + (angle(p3, p4) * square(p4, p5) * square(p4, p6)) / (angle(p1, p6) * angle(p2, p5))) + 2 * Cf * 1 / (s25 + s26 + s56) * ( - (angle(p1, p2)^2 * square(p1, p4) * square(p2, p4) * square(p2, p6) * angle(p3, p4)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) - (angle(p1, p2)^2 * square(p1, p4) * square(p2, p4) * square(p2, p5) * angle(p3, p4)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (angle(p1, p2) * square(p1, p4) * square(p2, p6) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p6) * angle(p2, p5)) - (angle(p1, p2) * square(p1, p4) * square(p2, p5) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p6) * angle(p2, p6)) - (angle(p1, p2) * square(p1, p4) * square(p2, p6) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * angle(p2, p5)) - (angle(p1, p2) * square(p1, p4) * square(p2, p5) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * angle(p2, p6)) + (angle(p1, p2) * square(p1, p4) * square(p2, p4) * angle(p3, p4) * square(p5, p6)) / (angle(p1, p6) * angle(p2, p5)) - (angle(p1, p2) * square(p1, p4) * square(p2, p4) * angle(p3, p4) * square(p5, p6)) / (angle(p1, p5) * angle(p2, p6)) + (square(p1, p4) * angle(p1, p5) * angle(p3, p4) * square(p4, p5) * square(p5, p6)) / (angle(p1, p6) * angle(p2, p5)) - (square(p1, p4) * angle(p1, p6) * angle(p3, p4) * square(p4, p6) * square(p5, p6)) / (angle(p1, p5) * angle(p2, p6)) + (square(p1, p4) * angle(p3, p4) * square(p4, p6) * square(p5, p6)) / (angle(p2, p5)) - (square(p1, p4) * angle(p3, p4) * square(p4, p5) * square(p5, p6)) / (angle(p2, p6))) + Nc * 1 / (s15 + s16 + s56) * ((square(p1, p6) * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (angle(p5, p6)) + (square(p1, p5) * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p5, p6)) + (s16 * square(p2, p4) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * angle(p5, p6)) + (s15 * square(p2, p4) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p6) * angle(p5, p6))) + Nc * 1 / (s25 + s26 + s56) * ((angle(p1, p2) * square(p1, p4) * square(p2, p4) * square(p2, p5) * angle(p3, p4)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * square(p1, p4) * square(p2, p4) * square(p2, p6) * angle(p3, p4)) / (angle(p1, p5) * angle(p5, p6)) + (square(p1, p4) * square(p2, p5) * angle(p3, p4) * square(p4, p6)) / (angle(p5, p6)) + (square(p1, p4) * square(p2, p6) * angle(p3, p4) * square(p4, p5)) / (angle(p5, p6)) + (square(p1, p4) * angle(p1, p5) * square(p2, p5) * angle(p3, p4) * square(p4, p5)) / (angle(p1, p6) * angle(p5, p6)) + (square(p1, p4) * angle(p1, p6) * square(p2, p6) * angle(p3, p4) * square(p4, p6)) / (angle(p1, p5) * angle(p5, p6))) )



M3_RLRRLL = 4 * C2 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( 2 * Cf * 1 / (s25 + s26 + s56) * ((angle(p1, p2)^2 * angle(p1, p3) * angle(p2, p3) * square(p2, p6) * square(p3, p4)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) + (angle(p1, p2)^2 * angle(p1, p3) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2)^2 * angle(p1, p3) * square(p3, p4) * angle(p3, p5) * square(p5, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) - (angle(p1, p2)^2 * angle(p1, p3) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6))) + Nc * 1 / (s25 + s26 + s56) * ( - (angle(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p2, p5) * square(p3, p4)) / (angle(p1, p6) * angle(p5, p6)) - (angle(p1, p2) * angle(p1, p3) * angle(p2, p3) * square(p2, p6) * square(p3, p4)) / (angle(p1, p5) * angle(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p6) * angle(p5, p6)) - (angle(p1, p2) * angle(p1, p3) * square(p3, p4) * angle(p3, p5) * square(p5, p6)) / (angle(p1, p5) * angle(p5, p6))) )



M3_LLRRLL = 2 * C3 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( 2 * Cf * ((angle(p1, p2) * angle(p2, p3) * square(p4, p5)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2) * angle(p2, p3) * square(p4, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5))) + 2 * Cf * 1 / (s25 + s26 + s56) * ( - (angle(p1, p2)^2 * square(p1, p4) * angle(p2, p3) * square(p2, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) - (angle(p1, p2)^2 * square(p1, p4) * angle(p2, p3) * square(p2, p5)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) - (angle(p1, p2)^2 * square(p1, p4) * angle(p3, p5) * square(p5, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) + (angle(p1, p2)^2 * square(p1, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6))) + Nc * 1 / (s15 + s16 + s56) * ((square(p1, p6) * angle(p2, p3) * square(p4, p5)) / (angle(p1, p6) * angle(p5, p6)) + (square(p1, p5) * angle(p2, p3) * square(p4, p6)) / (angle(p5, p6)) + (s16 * angle(p2, p3) * square(p4, p6)) / (angle(p1, p5) * angle(p5, p6)) + (s15 * angle(p2, p3) * square(p4, p5)) / (angle(p1, p6) * angle(p5, p6))) + Nc * 1 / (s25 + s26 + s56) * ((angle(p1, p2) * square(p1, p4) * angle(p2, p3) * square(p2, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * square(p1, p4) * angle(p2, p3) * square(p2, p6)) / (angle(p1, p5) * angle(p5, p6)) + (angle(p1, p2) * square(p1, p4) * angle(p3, p5) * square(p5, p6)) / (angle(p1, p5) * angle(p5, p6)) - (angle(p1, p2) * square(p1, p4) * angle(p3, p6) * square(p5, p6)) / (angle(p1, p6) * angle(p5, p6))) )



M3_RRRRLL = 2 * C4 * Cf * mv * gw^2 / ( (s12 - mV^2) * (pV^2 - mV^2) ) * ( - 2 * Cf * 1 / (s25 + s26 + s56) * ((angle(p1, p2)^2 * angle(p1, p3) * square(p2, p4) * square(p2, p6)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p5)) + (angle(p1, p2)^2 * angle(p1, p3) * square(p2, p4) * square(p2, p5)) / (angle(p1, p5) * angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p6) * square(p4, p5)) / (angle(p1, p6) * angle(p2, p5)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p5) * square(p4, p5)) / (angle(p1, p6) * angle(p2, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p6) * square(p4, p6)) / (angle(p1, p5) * angle(p2, p5)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p5) * square(p4, p6)) / (angle(p1, p5) * angle(p2, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p4) * square(p5, p6)) / (angle(p1, p5) * angle(p2, p6)) - (angle(p1, p2) * angle(p1, p3) * square(p2, p4) * square(p5, p6)) / (angle(p1, p6) * angle(p2, p5)) + (angle(p1, p3) * square(p4, p5) * square(p5, p6)) / (angle(p2, p6)) - (angle(p1, p3) * square(p4, p6) * square(p5, p6)) / (angle(p2, p5)) + (angle(p1, p3) * angle(p1, p6) * square(p4, p6) * square(p5, p6)) / (angle(p1, p5) * angle(p2, p6)) - (angle(p1, p3) * angle(p1, p5) * square(p4, p5) * square(p5, p6)) / (angle(p1, p6) * angle(p2, p5))) + Nc * 1 / (s25 + s26 + s56) * ((angle(p1, p2) * angle(p1, p3) * square(p2, p4) * square(p2, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p2) * angle(p1, p3) * square(p2, p4) * square(p2, p6)) / (angle(p1, p5) * angle(p5, p6)) + (angle(p1, p3) * square(p2, p5) * square(p4, p6)) / (angle(p5, p6)) + (angle(p1, p3) * square(p2, p6) * square(p4, p5)) / (angle(p5, p6)) + (angle(p1, p3) * square(p2, p5) * angle(p1, p5) * square(p4, p5)) / (angle(p1, p6) * angle(p5, p6)) + (angle(p1, p3) * angle(p1, p6) * square(p2, p6) * square(p4, p6)) / (angle(p1, p5) * angle(p5, p6))) )



